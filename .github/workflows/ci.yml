name: build-envs

on:
  push:
    branches:
    - 'master'
    paths:
    - darwin/**
    - workstation/**
    - flake.nix
    - flake.lock
    - .github/workflows/ci.yml
    - roles/**
    - '!darwin/**.md'
    - '!workstation/**.md' 
    - '!**.md'
  schedule:
  - cron: '0 0 * * Thu'
  workflow_dispatch:

jobs:
  build-nixos-env:
    name: Build NixOS env
    runs-on: ubuntu-latest
  
    steps:
    - name: Use Apache Flink free_disk_space.sh
      run: |
        curl -L 'https://raw.githubusercontent.com/apache/flink/02d30ace69dc18555a5085eccf70ee884e73a16e/tools/azure-pipelines/free_disk_space.sh' -o ./free_disk_space.sh \
          && chmod +x ./free_disk_space.sh \
          && ./free_disk_space.sh \
          && rm -f ./free_disk_space.sh 

    - name: Checkout repository
      uses: actions/checkout@v2
  
    - name: Install Nix
      uses: cachix/install-nix-action@v18
    
    - name: If scheduled or manually triggered, update inputs again
      if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
      run: |
        nix flake update
  
    - name: Build nixos-desktop output 
      run: |
        # Build nixos-desktop output
        nix build .#nixosConfigurations.nixos-desktop-intel.config.system.build.toplevel
        rm -rf ./result

    - name: Build nixos-server output 
      run: |
        # Build nixos-server output
        nix build .#nixosConfigurations.nixos-server-intel.config.system.build.toplevel
        rm -rf ./result
   
    - name: If scheduled or manually triggered, add updated flake.lock if changed, commit and push
      if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
      uses: EndBug/add-and-commit@v9
      with:
        add: 'flake.lock'
        author_name: 'github-actions'
        author_email: 'github-actions@github.com' 

  build-macos-env:
    name: Build macOS Nix env
    runs-on: macos-latest
    needs: build-nixos-env # since build-nixos-env updates the flake.lock
  
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
  
    - name: Install Nix
      uses: cachix/install-nix-action@v18

    - name: Build macos-desktop output 
      run: |
        # Create /run directory
        echo -e "run\tprivate/var/run" | sudo tee -a /etc/synthetic.conf >/dev/null
        /System/Library/Filesystems/apfs.fs/Contents/Resources/apfs.util -t &>/dev/null || true
        # Build macos-desktop output
        nix build .#darwinConfigurations.macos-desktop-intel.system
